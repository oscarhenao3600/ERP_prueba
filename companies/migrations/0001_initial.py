# Generated by Django 4.2.7 on 2025-09-20 02:04

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identificador único del usuario', primary_key=True, serialize=False)),
                ('employee_id', models.CharField(blank=True, help_text='Identificador del empleado en la empresa', max_length=50, verbose_name='ID de empleado')),
                ('phone', models.CharField(blank=True, help_text='Número de teléfono del usuario', max_length=20, verbose_name='Teléfono')),
                ('position', models.CharField(blank=True, help_text='Cargo o posición del usuario en la empresa', max_length=100, verbose_name='Cargo')),
                ('department', models.CharField(blank=True, help_text='Departamento al que pertenece el usuario', max_length=100, verbose_name='Departamento')),
                ('is_company_admin', models.BooleanField(default=False, help_text='Indica si el usuario es administrador de la empresa', verbose_name='Administrador de empresa')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Fecha de actualización')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'ordering': ['last_name', 'first_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identificador único de la empresa', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Nombre comercial de la empresa', max_length=255, verbose_name='Nombre de la empresa')),
                ('legal_name', models.CharField(help_text='Razón social oficial de la empresa', max_length=255, verbose_name='Razón social')),
                ('tax_id', models.CharField(help_text='Número de identificación tributaria', max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='El NIT debe contener solo números, guiones y puntos', regex='^[0-9\\-\\.]+$')], verbose_name='NIT/RUT')),
                ('email', models.EmailField(help_text='Email principal de contacto de la empresa', max_length=254, verbose_name='Email de contacto')),
                ('phone', models.CharField(blank=True, help_text='Número de teléfono de contacto', max_length=20, verbose_name='Teléfono')),
                ('address', models.TextField(blank=True, help_text='Dirección física de la empresa', verbose_name='Dirección')),
                ('is_active', models.BooleanField(default=True, help_text='Indica si la empresa está activa en el sistema', verbose_name='Activa')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Fecha de actualización')),
            ],
            options={
                'verbose_name': 'Empresa',
                'verbose_name_plural': 'Empresas',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EntityType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identificador único del tipo de entidad', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Nombre del tipo de entidad (ej: vehicle, employee, contract)', max_length=100, unique=True, verbose_name='Nombre')),
                ('display_name', models.CharField(help_text='Nombre legible para mostrar en la interfaz', max_length=100, verbose_name='Nombre para mostrar')),
                ('description', models.TextField(blank=True, help_text='Descripción del tipo de entidad', verbose_name='Descripción')),
                ('is_active', models.BooleanField(default=True, help_text='Indica si el tipo de entidad está activo', verbose_name='Activo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
            ],
            options={
                'verbose_name': 'Tipo de entidad',
                'verbose_name_plural': 'Tipos de entidad',
                'ordering': ['display_name'],
                'indexes': [models.Index(fields=['name'], name='companies_e_name_95600c_idx'), models.Index(fields=['is_active'], name='companies_e_is_acti_ac3489_idx')],
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identificador único de la entidad', primary_key=True, serialize=False)),
                ('external_id', models.CharField(help_text='Identificador de la entidad en el sistema externo', max_length=100, verbose_name='ID externo')),
                ('name', models.CharField(help_text='Nombre o descripción de la entidad', max_length=255, verbose_name='Nombre')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Información adicional de la entidad en formato JSON', verbose_name='Metadatos')),
                ('is_active', models.BooleanField(default=True, help_text='Indica si la entidad está activa', verbose_name='Activa')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Fecha de actualización')),
                ('company', models.ForeignKey(help_text='Empresa a la que pertenece la entidad', on_delete=django.db.models.deletion.CASCADE, related_name='entities', to='companies.company', verbose_name='Empresa')),
                ('entity_type', models.ForeignKey(help_text='Tipo de entidad de negocio', on_delete=django.db.models.deletion.CASCADE, related_name='entities', to='companies.entitytype', verbose_name='Tipo de entidad')),
            ],
            options={
                'verbose_name': 'Entidad',
                'verbose_name_plural': 'Entidades',
                'ordering': ['name'],
            },
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['tax_id'], name='companies_c_tax_id_b95ae4_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['is_active'], name='companies_c_is_acti_03043b_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['created_at'], name='companies_c_created_301a54_idx'),
        ),
        migrations.AddField(
            model_name='user',
            name='company',
            field=models.ForeignKey(help_text='Empresa a la que pertenece el usuario', on_delete=django.db.models.deletion.CASCADE, related_name='users', to='companies.company', verbose_name='Empresa'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='entity',
            index=models.Index(fields=['company', 'entity_type'], name='companies_e_company_ec1443_idx'),
        ),
        migrations.AddIndex(
            model_name='entity',
            index=models.Index(fields=['is_active'], name='companies_e_is_acti_db4f1d_idx'),
        ),
        migrations.AddIndex(
            model_name='entity',
            index=models.Index(fields=['created_at'], name='companies_e_created_bbf94a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='entity',
            unique_together={('company', 'entity_type', 'external_id')},
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['company'], name='companies_u_company_68acb8_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active'], name='companies_u_is_acti_4e5c24_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_company_admin'], name='companies_u_is_comp_bf4eef_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='companies_u_created_acb53b_idx'),
        ),
    ]
